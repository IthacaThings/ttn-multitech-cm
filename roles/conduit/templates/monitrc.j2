# AUTOMATICALLY GENERATED BY ANSIBLE, EDITS WILL BE LOST

# Log to syslog
set logfile syslog facility log_daemon

# Poll every {{ monit_poll }} seconds
set daemon {{ monit_poll }}

# Use a Unix socket for monitoring
set httpd unixsocket /var/run/monit.sock
    allow monit:monit

# Monitor the system
check system $HOST
    if loadavg (1min) > 1 then alert
    if loadavg (5min) > 2 then alert
    if memory usage > 25% then alert

# Event Queue
set eventqueue basedir {{ monit_eventqueue }}

{% if monit_mmonit_url is defined %}
# M/Monit URL
set mmonit {{ monit_mmonit_url }}
{% endif %}

#
#	Monitor networking
#

# Monitor a host for network reachability
{% if monit_ping_host is defined %}
check host {{ monit_ping_host }} address {{ monit_ping_host }}
    if failed ping
{% if monit_ping_count is defined %}
        count {{ monit_ping_count }}
{% endif %}
        for {{ monit_ping_alert_cycles }} cycles
        then alert
    if failed ping
{% if monit_ping_count is defined %}
        count {{ monit_ping_count }}
{% endif %}
        for {{ monit_ping_reboot_cycles }} cycles
        then {{ monit_ping_action }}
{% endif %}

#
#	Monitor root filesystem
#
check filesystem root with path /
    if space {{ monit_root_test }} then alert

#
#	Monitor config filesystem
#
check filesystem config with path /var/config
  if space {{ monit_config_test }} then alert

#
#	Monitor volatile Filesystem
#
check filesystem volatile with path /var/volatile
    if space {{ monit_volatile_test }} then alert
    if space {{ monit_volatile_test }} for {{ monit_volatile_period }} then {{ monit_volatile_action }}

#
#	Monitor services
#
#	We wait for {{ monit_pktfwd_period }} in case the
#       processes are being reestarted, for example by logrotate or
#       Ansible reconfiguration.
#

# Monitor ttn-pkt-forwarder
check process ttn-pkt-forwarder PIDFILE {{ monit_pktfwd_pidfile }}
    if does not exist for {{ monit_pktfwd_period }} then restart
    start program = {{ monit_pktfwd_start }}
    stop program = {{ monit_pktfwd_stop }}

# Check for error conditions in packet forwarder log
check program check_pktfwdlog with path /usr/local/lib/check_pktfwdlog
    if status != 0 then exec {{ monit_pktfwd_restart }}

{% if ssh_tunnel_enabled %}
# Monitor autossh
check process ssh_tunnel MATCHING /usr/bin/autossh
    if does not exist for {{ monit_process_period }} then restart
    start program = "/etc/init.d/ssh_tunnel start" with timeout 15 seconds
    stop program = "/etc/init.d/ssh_tunnel stop"
{% endif %}

# Monitor sshd
check process sshd PIDFILE /var/run/sshd.pid
    if does not exist for {{ monit_process_period }} then restart
    start program = "/etc/init.d/sshd start" with timeout 15 seconds
    stop program = "/etc/init.d/sshd stop"

# Monitor ntpd
check process ntpd PIDFILE {{ monit_ntpd_pidfile }}
    if does not exist for {{ monit_process_period }} then restart
    start program = "/etc/init.d/ntpd start" with timeout 15 seconds
    stop program = "/etc/init.d/ntpd stop"

# Monitor system directory checksums
check program check_system_md5  with path /usr/local/lib/check_system_md5
    every "{{ 60 | random(seed=inventory_hostname) }} * * * *"
    if status == 1 then alert

