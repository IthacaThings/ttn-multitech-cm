---
#
#	Check mLinux version
#

- name: Read checksum file
  ansible.builtin.uri:
    url: "{{ mlinux_url }}/{{ item }}"
    return_content: yes
    timeout: 120
  ignore_errors: true
  delegate_to: localhost
  register: checksum_data
  until: "checksum_data.content != ''"
  loop:
    - "md5sum.txt"
    - "md5sums.txt"

- name: Extract checksum from file
  set_fact:
    mlinux_upgrade_expected_md5: "{{ item.content | regex_findall('^([a-z0-9]{32})\\s+' ~ mlinux_upgrade_bin ~ '\\b', multiline=True) }}"
  when: item.status == 200
  until: mlinux_upgrade_expected_md5 != ""
  loop: "{{ checksum_data.results }}"

- name: Check if {{ mlinux_upgrade_bin }}_{{ mlinux_version }} is downloaded
  local_action: stat
  args:
    checksum_algorithm: md5
    path: "{{ role_path }}/files/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
  register: mlinux_upgrade_stat
  
- name: Remove bad copy of {{ mlinux_upgrade_bin }}_{{ mlinux_version }}
  local_action: file
  args:
    name: "{{ role_path }}/files/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
    state: absent
  when:
    - mlinux_upgrade_stat.stat.exists and mlinux_upgrade_stat.stat.checksum != mlinux_upgrade_expected_md5

- name: Download {{ mlinux_upgrade_bin }}_{{ mlinux_version }}
  local_action: get_url
  args:
    url: "{{ mlinux_url }}/{{ mlinux_upgrade_bin }}"
    dest: "{{ role_path }}/files/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
    timeout: 14400
    checksum: "md5:{{ mlinux_upgrade_expected_md5 }}"
  when:
    - mlinux_upgrade_stat.stat.exists == False or mlinux_upgrade_stat.stat.checksum != mlinux_upgrade_expected_md5

- name: Validate {{ mlinux_upgrade_bin }}_{{ mlinux_version }}
  local_action:
    module: shell
    args: "{{ role_path }}/files/mlinux-firmware-upgrade -h {{ conduit_type }} -n {{ role_path }}/files/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"

- name: Unmonitor space usage on /var/volatile
  shell: "monit unmonitor volatile"
  notify: monit monitor volatile
  ignore_errors: yes

- name: Remove some temp files from a failed upgrade
  file:
    name: "{{ item }}"
    state: absent
    force: true
  loop:
    - /var/volatile/do_flash_upgrade
    - /var/volatile/flash-upgrade

- name: Copy {{ mlinux_upgrade_bin }}_{{ mlinux_version }} to {{ hostname }}
  copy:
    dest: /var/volatile/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}
    src: "{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
    mode: "0600"
    owner: root
    group: root
    unsafe_writes: yes

- name: Copy over setup script
  template:
    src: mlinux_setup.j2
    dest: /var/config/mlinux_setup
    mode: "0755"
    owner: root
    group: root
  when: ansible_local.opkg.preserve is not defined

- name: Copy over mlinux-firmware-upgrade script
  copy:
    dest: "/usr/sbin/mlinux-firmware-upgrade"
    src: mlinux-firmware-upgrade
    mode: "0755"
    owner: root
    group: root

- name: Prep flash upgrade
  shell:
    cmd: "/usr/sbin/mlinux-firmware-upgrade -N {{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
    chdir: //var/volatile
  register: flash_upgrade

- name: Reboot
  shell: "reboot"
  async: 1
  poll: 0
  when: flash_upgrade is changed

- name: Wait for reboot
  wait_for:
    host: "{{ ansible_host }}"
    state: started
    port: "{{ ansible_port }}"
    delay: 30 
    timeout: 1200
    connect_timeout: 15
  ignore_errors: true
  connection: local
  when: flash_upgrade is changed

#
#	Recover state
#

- name: Run mlinux_setup script
  import_tasks: mlinux_setup.yml

# XXX - Change root password

- name: Reload ansible_local
  setup: filter=ansible_local
...
