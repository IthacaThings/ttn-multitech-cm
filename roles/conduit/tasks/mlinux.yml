---
#
#	Check mLinux version
#

- name: Check if md5sums_{{ conduit_type }}_{{ mlinux_version }}.txt is downloaded
  local_action: stat
  args:
    path: "{{ role_path }}/files/md5sums_{{ conduit_type }}_{{ mlinux_version }}.txt"
  register: mlinux_md5sums_stat
  
- name: Download md5sums_{{ conduit_type }}_{{ mlinux_version }}.txt
  local_action: get_url
  args:
    url: "{{ mlinux_url }}/md5sums.txt"
    dest: "{{ role_path }}/files/md5sums_{{ conduit_type }}_{{ mlinux_version }}.txt"
    timeout: 14400
  when:
    - mlinux_md5sums_stat.stat.exists == False

  # upgrade.bin
- name: Get expected md5 of {{ mlinux_upgrade_bin }}_{{ mlinux_version }}
  local_action:
    module: shell
    args: "grep '{{ mlinux_upgrade_bin }}' {{ role_path}}/files/md5sums_{{ conduit_type }}_{{ mlinux_version }}.txt | cut -d ' ' -f 1"
  register: mlinux_upgrade_expected_md5

- name: DEBUG
  debug:
    msg: "{{ mlinux_upgrade_expected_md5 }}"

- name: Check if {{ mlinux_upgrade_bin }}_{{ mlinux_version }} is downloaded
  local_action: stat
  args:
    path: "{{ role_path }}/files/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
  register: mlinux_upgrade_stat
  
- name: Remove bad copy of {{ mlinux_upgrade_bin }}_{{ mlinux_version }}
  local_action: file
  args:
    name: "{{ role_path }}/files/{{ mlinux_upgrade }}_{{ mlinux_version }}"
    state: absent
  when:
    - mlinux_upgrade_stat.stat.exists and mlinux_upgrade_stat.stat.md5 != mlinux_upgrade_expected_md5.stdout

- name: Download {{ mlinux_upgrade_bin }}_{{ mlinux_version }}
  local_action: get_url
  args:
    url: "{{ mlinux_url }}/{{ mlinux_upgrade_bin }}"
    dest: "{{ role_path }}/files/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
    timeout: 14400
    checksum: "md5:{{ mlinux_upgrade_expected_md5.stdout }}"
  when:
    - mlinux_upgrade_stat.stat.exists == False

- name: Copy {{ mlinux_upgrade_bin }}_{{ mlinux_version }} to {{ hostname }}
  copy:
    dest: ~/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}
    src: "{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
    mode: "0600"
    owner: root
    group: root
    unsafe_writes: yes
  register: upgrade_copy

- name: Copy over setup script
  template:
    src: mlinux_setup.j2
    dest: /var/config/mlinux_setup
    mode: "0755"
    owner: root
    group: root
  when: ansible_local.opkg.preserve is not defined

- name: Run flash upgrade
  shell: "mlinux-flash-upgrade ~/{{ mlinux_upgrade_bin }}_{{ mlinux_version }}"
  async: 1
  poll: 0
  ignore_errors: true

- name: Wait for reboot
  wait_for:
    host: "{{ ansible_host }}"
    state: started
    port: "{{ ansible_port }}"
    delay: 30 
    timeout: 1200
    connect_timeout: 15
  ignore_errors: true
  connection: local

#
#	Recover state
#
- name: Run mlinux_setup script
  local_action:
    module: shell
    args: "sshpass -proot ssh root@{{ ansible_host }} /var/config/mlinux_setup"
  when: ansible_local.opkg.preserve is not defined

# XXX - Change root password
  
- name: Reload ansible_local
  setup: filter=ansible_local

