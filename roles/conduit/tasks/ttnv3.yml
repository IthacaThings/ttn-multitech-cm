

#
#	Register gateway with TTNv3
#

- name: Register the gateway
  local_action:
    module: shell
    args:
      "bin/register
        --v3
        --json
        --id {{ lora_hostname }} 
        --eui {{ ansible_local.lora.eui }}
      	--region {{ region }}
        --latitude {{ latitude }}
        --longitude {{ longitude }}
        --altitude {{ altitude }}
        {{ '--update-location-from-status' if use_gps and have_gps else '' }}
        --router {{ router_v3 }}
        --description {{ description | quote }}
        --brand {{ gateway_brand | quote }}
        --model {{ gateway_model | quote }}
        --antenna-type {{ antenna_type | quote }}
        --antenna-model {{ antenna_model | quote }}
        --collaborators '{{ gateway_collaborators | to_json }}'"
  register: register_output

- name: Set the gateway_info fact
  set_fact:
    gateway_info: "{{ register_output.stdout | from_json }}"
  when: forwarder_variant == 'mp'

- name: Set Some facts
  set_fact:
    gw_router: "{{ gateway_info.gateway_server_address }}"
  when: forwarder_variant == 'mp'

- name: Read local_conf from gateway
  slurp:
    src: /var/config/lora/local_conf.json
  register: local_conf_b64
  ignore_errors: true

- name: Parse local_conf
  set_fact:
    local_conf: "{{ local_conf_b64.content | b64decode | from_json }}"
  ignore_errors: true
  when: local_conf_b64 is succeeded

- name: Extract gw_key
  set_fact:
    gw_key: "{{ local_conf.gateway_conf.servers[0].serv_gw_key }}"
  when:
    - local_conf is defined
    - "'gateway_conf' in local_conf"
    - "'servers' in local_conf.gateway_conf"
    - "'serv_gw_key' in local_conf.gateway_conf.servers[0]"
    - local_conf.gateway_conf.servers[0].serv_gw_key.startswith("NNSXS.")

- name: Test key by fetching config
  uri:
    headers:
      Authorization: "Bearer {{ gw_key }}"
    url: "https://{{ router_v3 }}/api/v3/gcs/gateways/{{ lora_hostname }}/semtechudp/global_conf.json"
    method: GET
  register: get_config
  ignore_errors: true
  delegate_to: 127.0.0.1
  when: gw_key is defined

- name: Extract global.conf
  set_fact:
    global_conf: "{{ get_config.json }}"
  when:
    - gw_key is defined
    - get_config is succeeded

- name: Generate a key  
  local_action:
    module: shell
    args:
      "ttn-lw-cli gateway api-keys create {{ lora_hostname }} --name link --right-gateway-link"
  register: key_data_json
  notify: TTNv3 cleanup
  when: gw_key is not defined or get_config is not succeeded

- name: Extract the key and key_id
  block:
    - set_fact:
        key_data: "{{ key_data_json.stdout | from_json }}"
    - set_fact:
        gw_key: "{{ key_data.key }}"
        gw_key_id: "{{ key_data.id }}"
  when: gw_key is not defined and key_data_json is success

- name: Get the config file
  uri:
    url: "https://{{ router_v3 }}/api/v3/gcs/gateways/{{ lora_hostname }}/semtechudp/global_conf.json"
    method: GET
    headers:
      Authorization: "Bearer {{ gw_key }}"
  register: get_config
  delegate_to: 127.0.0.1
  when: global_conf is not defined

- name: Extract global.conf
  set_fact:
    global_conf: "{{ get_config.json }}"
  when: global_conf is not defined
...
