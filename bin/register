#!/usr/bin/env python

# XXX - Do we need to register with a specific region for TTNv3?
# XXX - Can we provide a table of routers per region?
# XXX - Key for v3
# XXX - Fix error on get config on v3 gateway that does not exist

"""
MIT License

Copyright (c) 2017 Jeffrey C Honig

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from __future__ import print_function
import argparse
import errno
import fcntl
import json
import logging
import os
import pprint
import random
import re
import subprocess
import sys
import time
import yaml

try:
    # For Python 3.0 and later
    from urllib.request import urlopen, Request
    from urllib.error import URLError
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen, Request, URLError

REGISTER_URL = "https://account.thethingsnetwork.org/users/authorize?client_id=ttnctl&redirect_uri=/oauth/callback/ttnctl&response_type=code"
REGIONS = {
    "AS1": {
        "plan": "AS_920_923",
        "plan_v3": "AS_920_923_TTN_AU"
    },
    "AS2": {
        "plan": "AS_923_925",
        "plan_v3": "AS_923_925_TTN_AU"
    },
    "AU": {
        "plan": "AU_915_928",
        "plan_v3": "AU_915_928_FSB_2"
    },
    "EU": {
        "plan": "EU_863_870",
        "plan_v3": "EU_863_870_TTN"
    },
    "IN": {
        "plan": "IN_865_867",
        "plan_v3": "IN_865_867",
    },
    "KR": {
        "plan": "KR_920_923",
        "plan_v3": "KR_920_923_TTN"
    },
    "RU": {
        "plan": "RU_864_870",
        "plan_v3": "RU_864_870_TTN"
    },
    "US": {
        "plan": "US_902_928",
        "plan_v3": "US_902_928_FSB_2"
    },
}

class GatewayV2(object):
    """ TTN v2 Gateway """

    _INFO_RE = re.compile(r"^\s+(?P<key>[A-za-z ]+):\s(?P<value>.*)\s*$")

    def __init__(self, options):
        self._options = options
        self._key = None
        self._data = self._get_json()
        self._collaborators = []

    def __str__(self):

        if self._data:
            return pprint.pformat(self._data)

        return self._options.gw_id

    @property
    def json(self):
        """ Dump data as json for parsing """

        return json.dumps({
            "key": self._key,
            "info": self._data
        }, indent=4)

    def exists(self):
        """ Does this gateway exist """

        return self._data is not None

    def _get_info(self):
        """ Get additional info via 'info' subcommand """

        collaborators = None

        cmd = ["gateway", "info", self._options.gw_id]
        try:
            lines = check_output(self._options.binary, False, cmd)
        except subprocess.CalledProcessError as error:
            logging.error(error.output)

        for line in lines.split("\n"):
            if line.strip() == "":
                continue

            if line.strip().find("Found gateway") != -1:
                continue

            # Collaborators is YAML
            if line.rstrip() == "Collaborators:":
                collaborators = []
                continue
            if collaborators is not None:
                collaborators.append(line.rstrip())
                continue

            match = self._INFO_RE.match(line)
            if not match:
                continue

            if match.group('key') == "Access Key":
                self._key = match.group('value')

        if collaborators:
            self._collaborators = yaml.load("\n".join(collaborators), yaml.SafeLoader)

    def _get_json(self):
        """ Get the JSON info """

        logging.debug("GatewayV2.get_json()")

        if not self._key:
            self._get_info()

        url = "https://account.thethingsnetwork.org/gateways/%s" % self._options.gw_id
        try:
            request = Request(url)
            request.add_header("Key", self._key)
            response = urlopen(request)
            data = json.loads(response.read())
        except (ValueError, URLError) as err:
            logging.debug("Error loading %s: %s", url, err)
            return None

        return data

    def register(self):
        """ Register the gateway """

        cmd = [
            "gateway",
            "register",
            self._options.gw_id,
            self._options.region['plan']
        ]
        if self._options.latitude and self._options.longitue:
            cmd.append('%f,%f' % (self._options.latitude, self._options.longitude))
        cmd.extend(["--router-id", self._options.router])

        try:
            output = check_output(self._options.binary, self._options.noop, cmd)
            logging.debug(output)
        except subprocess.CalledProcessError as error:
            logging.warning(error)
            return False

        self._data = self._get_json()

        return True

    @property
    def frequency_plan(self):
        return self._data.get('frequency_plan')

    @property
    def router(self):
        return self._data.get('router',{}).get('id')

    @property
    def latitude(self):
        latitude = self._data.get('antenna_location', {}).get('latitude')
        return float(latitude) if latitude else None

    @property
    def longitude(self):
        longitude = self._data.get('antenna_location', {}).get('longitude')
        return float(longitude) if longitude else None

    @property
    def altitude(self):
        altitude = self._data.get('antenna_location', {}).get('altitude')
        return int(altitude) if altitude else None

    @property
    def description(self):
        return self._data.get('attributes', {}).get('description')

    @property
    def brand(self):
        return self._data.get('attributes', {}).get('brand')

    @property
    def model(self):
        return self._data.get('attributes', {}).get('model')

    @property
    def antenna_type(self):
        return self._data.get('attributes', {}).get('antenna_type')

    @property
    def antenna_model(self):
        return self._data.get('attributes', {}).get('antenna_model')

    @property
    def user_id(self):
        return self._data.get('owner', {}).get('username')

    @property
    def owner_public(self):
        return "gateway:owner" in self._data.get('public_rights', {})

    @property
    def location_public(self):
        return "gateway:location" in self._data.get('public_rights', {})

    @property
    def status_public(self):
        return "gateway:status" in self._data.get('public_rights', {})

    def update(self):
        """ Change registration if something is different """

        logging.debug("GatewayV2.update()")

        frequency_plan = REGIONS[self._options.region]['plan']

        changes = []
        if self.frequency_plan != frequency_plan:
            changes.extend(["--frequency-plan", frequency_plan])
        if self.latitude != self._options.latitude or self.longitude != self._options.longitude:
            changes.extend(["--location", "%f,%f" % (self._options.latitude,
                                                     self._options.longitude)])
        if self._options.router and self.router != self._options.router:
            changes.extend(["--router-id", self._options.router])
            changes.extend(["--router", self._options.router])
        if self._options.description and self.description != self._options.description:
            changes.extend(["--description", self._options.description])
        if self._options.brand and self.brand != self._options.brand:
            changes.extend(["--brand", self._options.brand])
        if self._options.model and self.model != self._options.model:
            changes.extend(["--model", self._options.model])
        if self._options.antenna_type and self.antenna_type != self._options.antenna_type:
            changes.extend(["--antenna-type", self._options.antenna_type])
        if self._options.antenna_model and self.antenna_model != self._options.antenna_model:
            changes.extend(["--antenna-model", self._options.antenna_model])
        if self.owner_public != self._options.owner_public:
            changes.append("--owner-public" if self._options.owner_public else "--owner-private")
        if self.location_public != self._options.location_public:
            changes.append("--location-public" if self._options.location_public else "--location-private")
        if self.status_public != self._options.status_public:
            changes.append("--status-public" if self._options.status_public else "--status-private")

        if not changes:
            return

        cmd = ["gateway", "edit", self._options.gw_id] + changes
        try:
            check_output(self._options.binary, self._options.noop, cmd)
        except subprocess.CalledProcessError as error:
            logging.error(error.output)
            sys.exit(1)

        # XXX - Merge response instead of getting fresh data?

        self._data = self._get_json()

    def collaborators(self):
        """ Update colaborators """

        logging.debug("GatewayV2.collaborators()")

        cols = {}
        for col in self._collaborators:
            cols[col['Username']] = {x.strip() for x in col.get('Rights').split(", ")}

        output = []
        for col in self._options.collaborators:
            changes = []
            username = col.get('username')
            if not username:
                # Ignore organizations
                continue
            if username not in cols:
                changes.append(username)
                rights = {x.strip() for x in col.get('rights', "").split(", ")}
                if rights != {''}:
                    changes.append(rights)

            if not changes:
                continue
            cmd = ["gateway", "collaborators", "add", self._options.gw_id] + changes
            try:
                out = check_output(self._options.binary, self._options.noop, cmd)
                output.append(out)
            except subprocess.CalledProcessError as error:
                logging.error(error)

class GatewayV3(object):
    """ TTN v3 Gateway """

    def __init__(self, options):
        self._options = options
        self._data = self._get_config()
        self._collaborators = None

    def __str__(self):
        if self._data:
            return pprint.pformat(self._data)

        return self._options.gw_id

    @property
    def json(self):
        """ Dump data as json for parsing """

        return json.dumps(self._data, indent=4)

    def exists(self):
        """ Does this gateway exist """

        return self._data is not None

    def _get_config(self):
        """ Get the gateway config """

        cmd = ["gateways", "get", "--all", self._options.gw_id]

        try:
            output = check_output(self._options.binaryv3, False, cmd)
            data = json.loads(output)
        except subprocess.CalledProcessError as error:
            logging.debug("Error running %s: %s", " ".join(cmd), error)
            return None

        return data

    def _get_collaborators(self):
        """ Get the gateway collaborators """

        cmd = ["gateways", "collaborators", "list", self._options.gw_id]

        try:
            output = check_output(self._options.binaryv3, False, cmd)
            data = json.loads(output)
        except subprocess.CalledProcessError as error:
            logging.debug("Error running %s: %s", " ".join(cmd), error)
            return None

        return data

    @property
    def frequency_plan(self):
        return self._data.get('frequency_plan_id')

    @property
    def eui(self):
        return self._data.get('ids', {}).get('eui')

    @property
    def router(self):
        return self._data.get('gateway_server_address')

    @property
    def latitude(self):
        latitude = self._data.get('antennas', [])[0].get('location', {}).get('latitude')
        return float(latitude) if latitude else None

    @property
    def longitude(self):
        longitude = self._data.get('antennas', [])[0].get('location', {}).get('longitude')
        return float(longitude) if longitude else None

    @property
    def altitude(self):
        altitude = self._data.get('antennas', [])[0].get('location', {}).get('altitude')
        return int(altitude) if altitude else None

    @property
    def name(self):
        return self._data.get('name')

    @property
    def brand(self):
        return self._data.get('version_ids', {}).get('brand_id')

    @property
    def model(self):
        return self._data.get('version_ids', {}).get('model_id')

    @property
    def location_public(self):
        return self._data.get('location_public', False)

    @property
    def status_public(self):
        return self._data.get('status_public', False)

    @property
    def update_location_from_status(self):
        return self._data.get('update_location_from_status', False)

    def register(self):
        """ Register the gateway """

        if not self._options.gw_eui:
            logging.error("--eui is required for v3")
            sys.exit(1)

        if not self._options.organization_id and not self._options.user_id:
            logging.error("--user-id or --organization-id must be specified")
            sys.exit(1)

        cmd = [
            "gateways",
            "register", self._options.gw_id,
            "--gateway-eui", self._options.gw_eui,
            "--frequency-plan-id", REGIONS[self._options.region]['plan_v3'],
            "--enforce-duty-cycle",
            "--location_public=%s" % json.dumps(self._options.location_public),
            "--status_public=%s" % json.dumps(self._options.status_public),
        ]
        cmd.extend(["--gateway-server-address", self._options.router])
        if self._options.organization_id:
            cmd.extend(["--organization-id", self._options.organization_id])
        if self._options.user_id:
            cmd.extend(["--user-id", self._options.user_id])
        if self._options.description:
            cmd.extend(["--name", self._options.description])
        if self._options.latitude:
            cmd.extend(["--antenna.location.latitude", str(self._options.latitude)])
        if self._options.longitude:
            cmd.extend(["--antenna.location.longitude", str(self._options.longitude)])
        if self._options.altitude:
            cmd.extend(["--antenna.location.altitude", str(self._options.altitude)])
        if self._options.brand:
            cmd.extend(["--version-ids.brand-id", self._options.brand.lower()])
        if self._options.model:
            cmd.extend(["--version-ids.model-id", self._options.model.lower()])

        try:
            output = check_output(self._options.binaryv3, self._options.noop, cmd)
            logging.debug(output)
        except subprocess.CalledProcessError as error:
            logging.warning("Registering gateway: %s", error)
            return False

        self._data = self._get_config()

        return True

    def update(self):
        """ Update configuration """

        frequency_plan = REGIONS[self._options.region]['plan_v3']

        changes = []
        if self.frequency_plan != frequency_plan:
            changes.extend(["--frequency-plan-id", frequency_plan])
        if self._options.gw_eui and self.eui != self._options.gw_eui:
            changes.extend(["--gateway-eui", self._options.gw_eui])
        if self._options.router and self.router != self._options.router:
            changes.extend(["--gateway-server-address", self._options.router])
        if self._options.latitude and self.latitude != self._options.latitude:
            changes.extend(["--antenna.location.latitude", str(self._options.latitude)])
        if self._options.longitude and self.longitude != self._options.longitude:
            changes.extend(["--antenna.location.longitude", str(self._options.longitude)])
        if self._options.altitude and self.altitude != self._options.altitude:
            changes.extend(["--antenna.location.altitude", str(self._options.altitude)])
        if self._options.description and self.name != self._options.description:
            changes.extend(["--name", self._options.description])
        if self._options.brand and self.brand.lower() != self._options.brand.lower():
            changes.extend(["--version-ids.brand-id", self._options.brand.lower()])
        if self._options.model and self.model.lower() != self._options.model.lower():
            changes.extend(["--version-ids.model-id", self._options.model.lower()])
        if self.location_public != self._options.location_public:
            changes.append("--location_public=%s" % json.dumps(self._options.location_public))
        if self.status_public != self._options.status_public:
            changes.append("--status_public=%s" % json.dumps(self._options.status_public))
        if self.update_location_from_status != self._options.update_location_from_status:
            changes.append("--update_location_from_status=%s" %
                           json.dumps(self._options.update_location_from_status))

        if not changes:
            return

        cmd = ["gateway", "set", "--gateway-id", self._options.gw_id] + changes
        try:
            check_output(self._options.binaryv3, self._options.noop, cmd)
        except subprocess.CalledProcessError as error:
            logging.error(error.output)
            sys.exit(1)

        self._data = self._get_config()

    def collaborators(self):
        """ Update colaborators """

        # XXX - This ignores rights

        logging.debug("GatewayV3.collaborators()")

        if self._collaborators is None:
            self._collaborators = self._get_collaborators()

        old_users = set()
        old_orgs = set()
        for col in self._collaborators:
            if "organization_ids" in col['ids']:
                old_orgs.add(col['ids']['organization_ids']['organization_id'])
            if "user_ids" in col['ids']:
                old_users.add(col['ids']['user_ids']['user_id'])

        new_users = set()
        new_orgs = set()
        for col in self._options.collaborators:
            if 'username' in col:
                new_users.add(col['username'])
            if 'organization' in col:
                new_orgs.add(col['organization'])

        output = []
        for user in new_users.difference(old_users):
            cmd = [
                "gateway",
                "collaborators",
                "set",
                "--gateway-id", self._options.gw_id,
                "--user-id", user,
                "--rights-gateway-all"
            ]
            try:
                out = check_output(self._options.binaryv3, self._options.noop, cmd)
                output.append(out)
            except subprocess.CalledProcessError as error:
                logging.error(error)

        for org in new_orgs.difference(old_orgs):
            cmd = [
                "gateway",
                "collaborators",
                "set",
                "--gateway-id", self._options.gw_id,
                "--organization-id", org,
                "--rights-gateway-all"
            ]
            try:
                out = check_output(self._options.binaryv3, self._options.noop, cmd)
                output.append(out)
            except subprocess.CalledProcessError as error:
                logging.error(error)

def check_output(binary, noop, command):
    """ Python version independent version of subprocess.check_output """

    cmd = list()
    cmd.append(binary)
    cmd.extend(command)

    logging.debug("DBG: %s", " ".join(cmd))

    if noop:
        return None

    if sys.version_info.major < 3 \
       or (sys.version_info.major == 3 and sys.version_info.minor < 7):
        output = subprocess.check_output(cmd).decode()
    else:
        output = subprocess.check_output(cmd, text=True)

    logging.debug("DBG: %s", "\nDBG: ".join(output.split("\n")))

    return output

def parse_args():
    """ Parse the arguments """

    eui_re = re.compile(r"^(?:eui-)?(?P<eui>[0-9a-fA-FF]{16})$")
    def eui(string):
        """ Valiate an EUI """
        match = eui_re.match(string)
        if not match:
            raise ValueError("EUI is not 16 hex digits with optional eui- prefix")
        return match.group('eui')

    parser = argparse.ArgumentParser(description="Register or re-regiter a Conduit with TTN")

    #	Debugging
    group = parser.add_argument_group("Debugging options")
    group.add_argument("-d", "--debug",
                       dest="debug", default=False,
                       action='store_true',
                       help="print debugging messages")
    group.add_argument("--nodebug",
                       dest="debug",
                       action='store_false',
                       help="print debugging messages")
    group.add_argument("-v", "--verbose",
                       dest="verbose", default=False,
                       action='store_true',
                       help="print verbose messages")
    group.add_argument("-n", "--noop",
                       dest="noop", default=False,
                       action='store_true',
                       help="Don't make changes, just list what we are going to do")

    #	Options
    group = parser.add_argument_group("Configuration options")
    group.add_argument("--id",
                       dest="gw_id", required=True,
                       help="Gateway ID")
    group.add_argument("--eui",
                       dest="gw_eui", type=eui,
                       help="Gateway EUI")
    group.add_argument("--ttnv3", "--v3",
                       dest="ttn_v3", default=False, action='store_true',
                       help="Register with TTN v3 insteadd of TTN v2")
    group.add_argument("--description",
                       dest="description",
                       help="Description of the Gateway")
    group.add_argument("--brand",
                       dest="brand",
                       help="Brand of the Gateway")
    group.add_argument("--model",
                       dest="model",
                       help="Model of the Gateway")
    group.add_argument("--antenna-type",
                       dest="antenna_type",
                       help="Antenna Type")
    group.add_argument("--antenna-model",
                       dest="antenna_model",
                       help="Antenna model")
    group.add_argument("--old_id",
                       dest="old_id",
                       help="Old ID of Gateway to remove")
    group.add_argument("--region",
                       dest="region", required=True,
                       choices=list(REGIONS.keys()),
                       help="Frequency region, one of %s" % ",".join(list(REGIONS.keys())))
    group.add_argument("--router", "--router-id",
                       dest="router", required=True,
                       help="TTN router to use")
    group.add_argument("--latitude",
                       dest="latitude", type=float,
                       help="Latitude of Conduit")
    group.add_argument("--longitude",
                       dest="longitude", type=float,
                       help="Longitude of Conduit")
    group.add_argument("--altitude",
                       dest="altitude", type=int,
                       help="Altitude of the conduit (in meters)")
    group.add_argument("--collaborators",
                       dest="collaborators", type=json.loads, default=[],
                       help="Collaborators in JSON format")
    group.add_argument("--update-location-from-status",
                       dest="update_location_from_status", action="store_true",
                       help="Update gateway location from gateway status messages")

    group = parser.add_mutually_exclusive_group()
    group.add_argument("--owner-public",
                       dest="owner_public", default=True, action="store_true",
                       help="Make the owner public")
    group.add_argument("--owner-private",
                       dest="owner_public", action="store_false",
                       help="Make the owner private")

    group = parser.add_mutually_exclusive_group()
    group.add_argument("--location-public",
                       dest="location_public", default=True, action="store_true",
                       help="Make the location public")
    group.add_argument("--location-private",
                       dest="location_public", action="store_false",
                       help="Make the location private")

    group = parser.add_mutually_exclusive_group()
    group.add_argument("--status-public",
                       dest="status_public", default=True, action="store_true",
                       help="Make the status public")
    group.add_argument("--status-private",
                       dest="status_public", action="store_false",
                       help="Make the status public")

    # Owner info (v3)
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--organization-id",
                       dest="organization_id",
                       help="Organization ID to own the gateway")
    group.add_argument("--user-id",
                       dest="user_id",
                       help="User ID to own the gateway")

    #   Other options
    group = parser.add_argument_group("Other options")
    group.add_argument("--binary",
                       dest="binary", default="bin/ttnctl",
                       help="Path to ttnctl binary")
    group.add_argument("--binaryv3",
                       dest="binaryv3", default="ttn-lw-cli",
                       help="Path to ttn-lw-cli binary")
    group.add_argument("--json",
                       dest="json", default=False,
                       action='store_true',
                       help="Output gateway info as json")

    options = parser.parse_args()
    if options.debug:
        options.verbose = options.debug
    if options.json and options.verbose:
        parser.error("--json is mutually exclusive with --verbose and --debug")

    return options

def delete_gateway(options, old_id):
    """ Delete this gateway """

    cmd = ["gateway", "delete", old_id]
    try:
        check_output(options.binary, options.noop, cmd)
    except subprocess.CalledProcessError as error:
        logging.warning(error.output)

def init_logging(options):
    """ Set up logging """

    logger = logging.getLogger()
    logger.handlers = []
    logger.addHandler(logging.StreamHandler())
    if options.debug:
        logger.setLevel('DEBUG')
    elif options.verbose:
        logger.setLevel('INFO')
    else:
        logger.setLevel('WARNING')

#
#
#
#
def main():
    """ Figure out what we should do """

    options = parse_args()
    init_logging(options)

    if options.ttn_v3:
        gateway = GatewayV3(options)
    else:
        gateway = GatewayV2(options)

    logging.debug("Gateway: %s", gateway)

    with open(os.path.abspath(sys.argv[0]), "r") as filep:
        while True:
            try:
                fcntl.flock(filep, fcntl.LOCK_EX | fcntl.LOCK_NB)
                break
            except IOError as error:
                # raise on unrelated IOErrors
                if error.errno != errno.EAGAIN:
                    raise
                time.sleep(random.uniform(0, 2))

        # Register the gateway if it does not exist
        if not gateway.exists():
            if not gateway.register() or not gateway.exists():
                return 1

        # Update parameters or set ones that register doesn't support
        gateway.update()

        # Set or update colaborators
        gateway.collaborators()

        if not options.ttn_v3 and options.old_id:
            delete_gateway(options, options.old_id)

        if options.json:
            print(gateway.json)

    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print()
        sys.exit(1)
