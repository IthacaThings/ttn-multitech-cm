#!/usr/bin/env python

from __future__ import print_function
import argparse
import fcntl
import os
import re
import subprocess
import sys

"""
MIT License

Copyright (c) 2017 Jeffrey C Honig

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

register_url = "https://account.thethingsnetwork.org/users/authorize?client_id=ttnctl&redirect_uri=/oauth/callback/ttnctl&response_type=code"

#
#	Gateway list
#
class Gateway(object):
    """Class to hold Gateway info"""

    info_re = re.compile(r"^\s+(?P<key>[A-za-z ]+):\s(?P<value>.*)\s*$")

    def __init__(self, options, id, frequency_plan, latitude, longitude, router):
        """"""
        self.options = options
        self.id = id
        self.frequency_plan = frequency_plan
        self.latitude = float(latitude)
        self.longitude = float(longitude)
        self.router = router
        self.registered = False
        self.description = None
        self.brand = None
        self.model = None
        self.placement = None

    def __repr__(self):
        return "%s: %s %s %f, %f %s" % (self.id, self.activated, self.frequency_plan, self.latitude, self.longitude, self.router)

    def register(self):
        """ Register the gateway """
        rc = 0
        try:
            cmd = [ self.options.binary, "gateway", "register", self.id, self.frequency_plan, '%f,%f' % (self.latitude, self.longitude) ]
            if self.router:
                cmd.append("--router-id")
                cmd.append(self.router)
            if self.options.noop:
                output = "NOOP: %s " % " ".join(cmd)
            else:
                if self.options.debug:
                    print("DBG: %s" % " ".join(cmd))
                output = subprocess.check_output(cmd)
                if self.options.debug:
                    print("DBG: %s" % "\nDBG: ".join(output.split("\n")))
                self.registered = True
        except subprocess.CalledProcessError as e:
            rc = e.returncode
            output = e.output
            
        return [ rc, output ] 

    def delete(self):
        """ Delete this gateway """

        rc = 0
        try:
            cmd = [ self.options.binary, "gateway", "delete", self.id ]
            if self.options.noop:
                output = "NOOP: %s " % " ".join(cmd)
            else:
                if self.options.debug:
                    print("DBG: %s" % " ".join(cmd))
                output = subprocess.check_output(cmd)
                if self.options.debug:
                    print("DBG: %s" % "\nDBG: ".join(output.split("\n")))
                self.registered = True
        except subprocess.CalledProcessError as e:
            rc = e.returncode
            output = e.output

        return [ rc, output ] 

    def edit(self, frequency_plan, latitude, longitude, router):
        """ Change registration if something is different """

        self.get_info()
        changes = []
        if self.frequency_plan != frequency_plan:
            changes.append("--frequency-plan")
            changes.append(frequency_plan)
        if self.latitude != latitude or self.longitude != longitude:
            changes.append("--location")
            changes.append("%f,%f" % (latitude, longitude))
        if router and self.router != router:
            changes.append("--router")
            changes.append(router)
        if self.options.description and self.description != self.options.description:
            changes.append("--description")
            changes.append(self.options.description)
        if self.options.brand and self.brand != self.options.brand:
            changes.append("--brand")
            changes.append(self.options.brand)
        if self.options.model and self.model != self.options.model:
            changes.append("--model")
            changes.append(self.options.model)
        if self.options.placement and self.placement != self.options.placement:
            changes.append("--antenna-type")
            changes.append(self.options.placement)

        if not changes:
            return [ 0, "No changes required" ]
                
        try:
            cmd = [ self.options.binary, "gateway", "edit", self.id ] + changes
            if self.options.noop:
                output = "NOOP: %s " % " ".join(cmd)
            else:
                if self.options.debug:
                    print("DBG: %s" % " ".join(cmd))
                output = subprocess.check_output(cmd)
                if self.options.debug:
                    print("DBG: %s" % "\nDBG: ".join(output.split("\n")))
                self.frequency_plan = frequency_plan
                self.latitude = latitude
                self.longitude = longitude
            rc = 0
        except subprocess.CalledProcessError as e:
            rc = e.returncode
            output = e.output
            
        return [ rc, output ] 

    def get_info(self):
        """ Get additional info via 'info' subcommand """

        try:
            cmd = [ self.options.binary, "gateway", "info", self.id ]
            if self.options.debug:
                print("DBG: %s" % " ".join(cmd))
            lines = subprocess.check_output(cmd)
        except subprocess.CalledProcessError as e:
            print(e.output, file=sys.stderr, end="")

        good_stuff = False
        for line in lines.split("\n"):
            if line.strip() == "":
                continue

            if line.strip().find("Found gateway") != -1:
                good_stuff = True
                continue

            if line.strip() == "Collaborators:":
                break
            
            match = self.info_re.match(line)
            if not match:
                continue

            if match.group('key') == "Router":
                self.router = match.group('value')
            elif match.group('key') == "Access Key":
                self.key = match.group('value')
            elif match.group('key') == "Description":
                self.description = match.group('value')
            elif match.group('key') == "Brand":
                self.brand = match.group('value')
            elif match.group('key') == "Model":
                self.model = match.group('value')
            elif match.group('key') == "Placement":
                self.placement = match.group('value')

        
def ttn_gateway_list(options):
    """Return a dict of Gateways"""

#        ID              Activated       Frequency Plan  Coordinates                        
    header_re = re.compile("^\s+ID")
#1       ttn-ith-test    false           AU_915_928      (42.517288, -76.710183, %!f(int=0))    
    line_re = re.compile("^\d+\s+([a-z0-9-]+)\s+(true|false)\s+((AU|EU|IN|KR|US|AS)_\d{3}_\d{3})\s+\((-?\d+\.\d+),\s+(-?\d+.\d+),.*$")

    gateways = dict()
    
    rc = 0
    try:
        cmd = [ options.binary, "gateway", "list" ]
        if options.debug:
            print("DBG: %s" % " ".join(cmd))
        lines = subprocess.check_output(cmd)
    except subprocess.CalledProcessError as e:
        rc = e.returncode
        print(e.output, file=sys.stderr, end="")
        return None

    for line in lines.split("\n"):
        if header_re.match(line):
            continue
        match = line_re.match(line)
        if not match:
            continue
        gateway = Gateway(options, match.group(1), match.group(3), match.group(5), match.group(6), None)
        gateway.activated = bool(match.group(2))
        gateways[gateway.id] = gateway

    return gateways
        
#
#
#
def main():
    """ Figure out what we should do """

    parser = argparse.ArgumentParser(description="Register or re-regiter a Conduit with TTN")

    #	Debugging
    group = parser.add_argument_group("Debugging options")
    group.add_argument("-d", "--debug",
                       dest="debug", default=False,
                       action='store_true',
                       help="print debugging messages")
    group.add_argument("--nodebug",
                       dest="debug",
                       action='store_false',
                       help="print debugging messages")
    group.add_argument("-v", "--verbose",
                       dest="verbose", default=False,
                       action='store_true',
                       help="print verbose messages")
    group.add_argument("-n", "--noop",
                       dest="noop", default=False,
                       action='store_true',
                       help="Don't make changes, just list what we are going to do")

    #	Options
    group = parser.add_argument_group("Configuration options")
    group.add_argument("--id",
                       dest="id", required=True,
                       help="Gateway ID")
    group.add_argument("--description",
                       dest="description",
                       help="Description of the Gateway")
    group.add_argument("--brand",
                       dest="brand",
                       help="Brand of the Gateway")
    group.add_argument("--model",
                       dest="model",
                       help="Model of the Gateway")
    group.add_argument("--placement",
                       dest="placement",
                       choices=[ "indoor", "outdoor" ],
                       help="Antenna placement")
    group.add_argument("--old_id",
                       dest="old_id",
                       help="Old ID of Gateway to remove")
    group.add_argument("--region",
                       dest="region", required=True,
		       choices=[ "AU", "EU", "US" ],
                       help="Frequency region, one of AU, EU, US")
    group.add_argument("--router", "--router-id",
                       dest="router",
                       choices=["",
                                "switch-router",
                                "ttn-router-asia-se",
                                "ttn-router-brazil",
                                "ttn-router-eu",
                                "ttn-router-us-west"],
                       help="TTN router to use")
    group.add_argument("--latitude",
                       dest="latitude", type=float, required=True,
                       help="Latitude of Conduit")
    group.add_argument("--longitude",
                       dest="longitude", type=float, required=True,
                       help="Longitude of Conduit")

    #   Other options
    group = parser.add_argument_group("Other options")
    group.add_argument("--binary",
                       dest="binary", default="bin/ttnctl",
                       help="Path to binary")

    options = parser.parse_args()

    # Find ttncli binary
    if options.debug:
        print("DBG: binary: %s" % options.binary)

    # Translate region into frequency plan
    # EU_863_870, US_902_928, AU_915_928, AS_920_923, AS_923_925, KR_920_923, IN_865_867
    if options.region == "AS1":
        frequency_plan = "AS_920_923"
    elif options.region == "AS2":
        frequency_plan = "AS_923_925"
    elif options.region == "AU":
        frequency_plan = "AU_915_928"
    elif options.region == "EU":
        frequency_plan = "EU_863_870"
    elif options.region == "KR":
        frequency_plan = "KR_920_923"
    elif options.region == "IN":
        frequency_plan = "IN_865_867"
    elif options.region == "US":
        frequency_plan = "US_902_928"

    if options.debug:
        print("DBG: ID: %s Frequency Plan: %s Location: %f, %f Router: %s" % (options.id, frequency_plan, options.latitude, options.longitude, options.router))

    try:
        fd = open(options.binary)
        fcntl.flock(fd, fcntl.LOCK_EX)
    except IOError:
        print("Unable to open or lock %s" % options.binary, file=sys.stderr)
        return (1)

    gateways = ttn_gateway_list(options)
    if gateways == None:
        print("Go to %s to get an access code" % register_url, file=sys.stderr)
        return (1)

    if options.old_id:
        try:
            rc, output = gateways[options.old_id].delete()
            if rc != 0:
                print("Deletion of %s failed: %s" % (options.old_id, output), file=sys.stderr)
        except KeyError:
            pass

    rc = 0
    if not gateways.has_key(options.id):
        gateway = Gateway(options, options.id, frequency_plan, options.latitude, options.longitude, options.router)
        gateways[options.id] = gateway
        rc, output = gateway.register()
    if rc == 0:
        rc, output = gateways[options.id].edit(frequency_plan, options.latitude, options.longitude, options.router)
    if rc != 0:
        print("Registration failed: %s" % output, file=sys.stderr)
    elif options.verbose:
        print(output)

    return(rc)

if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt:
        print()
        sys.exit(1)

